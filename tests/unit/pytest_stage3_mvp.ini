# MVP Stage 3 Pytest Configuration
# Optimized for fast execution of transcript generation tests

[tool:pytest]
# Test discovery
testpaths = tests/unit
python_files = test_stage_3_mvp.py
python_classes = TestStage3MVP
python_functions = test_*

# Output configuration
addopts = 
    --strict-markers
    --strict-config
    --disable-warnings
    --tb=short
    --no-header
    --cache-clear
    -v

# Performance optimizations for MVP
cache_dir = .pytest_cache
collect_ignore = []

# Timeout settings (Stage 3 has AI model operations that need time)
timeout = 150
timeout_method = thread

# Markers for test categorization
markers =
    audio_diarization: Tests for core audio transcription and speaker diarization
    youtube_transcript: Tests for YouTube transcript API extraction
    stage_integration: Tests for pipeline integration and handoff validation
    performance: Performance-critical tests that must meet MVP timing targets
    error_handling: Tests for robust error handling and failure scenarios

# Logging configuration for debugging
log_cli = false
log_cli_level = WARNING
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Coverage settings (disabled for MVP speed)
# addopts = --cov=Code.Extraction --cov-report=term-missing

# Parallel execution settings (disabled for MVP deterministic timing)
# addopts = -n auto

# Test filtering for MVP focus
filterwarnings =
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning

# Minimum version requirements
minversion = 6.0

# Test session configuration
console_output_style = progress
junit_family = xunit2

# Stage 3 specific settings
# Mock heavy operations for speed while maintaining functional validation
python_paths = .
